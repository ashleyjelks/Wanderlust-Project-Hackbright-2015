import urllib2import sysimport jsonimport pprintimport dateutil.parserfrom model import connect_to_db, db, Flight, User, Search, SavedSearchfrom server import appfrom airline_airport_conversions import airlines, cities, airportsfrom time import sleep# from key import google_flights_api_key_1, google_flights_api_key_2, google_flights_api_key_3, google_flights_api_key_4, google_flights_api_key_5, google_flights_api_key_6API_URL = "https://www.googleapis.com/qpxExpress/v1/trips/search?key=AIzaSyC960CyTTJEv2LsTK9Q8I7JPeVlPD-tpMs"USA_AIRPORT_CODES = ["SFO", "LAX", "PHX", "SEA", "DEN", "DFW", "ORD", "ATL", "MIA", "IAD", "JFK", "BOS", "LAS", "OGG"]JFK_AIRPORT_CODES = [("JFK", "DEN"), ("JFK", "DFW"), ("JFK", "ORD"), ("JFK", "ATL"), ("JFK", "MIA"), ("JFK", "IAD"), ("JFK", "BOS"), ("JFK", "LAS"), ("JFK", "OGG")]BOS_AIRPORT_CODES = [("BOS", "SFO"), ("BOS", "LAX"), ("BOS", "PHX"), ("BOS", "SEA"), ("BOS", "DEN"), ("BOS", "DFW"), ("BOS", "ORD"), ("BOS", "ATL"), ("BOS", "MIA"), ("BOS", "IAD"), ("BOS", "JFK"), ("BOS", "LAS"), ("BOS", "OGG")]LAS_AIRPORT_CODES = [("LAS", "SFO"), ("LAS", "LAX"), ("LAS", "PHX"), ("LAS", "SEA"), ("LAS", "DEN"), ("LAS", "DFW"), ("LAS", "ORD"), ("LAS", "ATL"), ("LAS", "MIA"), ("LAS", "IAD"), ("LAS", "JFK"), ("LAS", "BOS"), ("LAS", "OGG")]CANADIAN_AIRPORT_CODES = ["YUL", "YYZ", "YVR"]MEXICO_CARIBBEAN_AIRPORT_CODES = ["MBJ", "CUN", "SJU"]LATIN_AMERICAN_AIRPORT_CODES = ["EZE", "GIG"]EUROPEAN_AIRPORT_CODES = ["LIS", "MAD", "CDG", "LHR", "DUB", "FCO", "AMS", "TXL", "CPH"]AFRICAN_AIRPORT_CODES = ["CPT", "RAK"]ASIAN_AIRPORT_CODES = ["KUL", "PEK", "HND", "SGN"]MIDDLE_EASTERN_AIRPORT_CODES = ["DXB", "IST"]OCEANIAN_AIRPORT_CODES = ["SYD"]CITY_COMBOS_1 = [("LAX", "IAD"), ("PHX", "BOS"), ("ATL", "JFK"), ("MIA", "PHX"), ("IAD", "LAX"), ("IAD", "SEA")]CITY_COMBOS_2 = [("SFO", "MBJ"),("SFO", "LHR"), ("SFO", "FCO"), ("LAX", "EZE"), ("LAX", "SYD"), ("SEA", "YYZ"), ("SEA", "LHR")]INTERNATIONAL_AIRPORT_CODES_DEN = [("DEN", "YUL"), ("DEN", "YYZ"), ("DEN", "YVR"), ("DEN", "MBJ"), ("DEN", "CUN"), ("DEN", "SJU"), ("DEN", "LIS"), ("DEN", "MAD"), ("DEN", "CDG"),                                   ("DEN", "LHR"), ("DEN", "DUB"), ("DEN", "FCO"), ("DEN", "AMS"), ("DEN", "TXL"), ("DEN", "CPH"), ("DEN", "EZE"), ("DEN", "GIG"), ("DEN", "CPT"),                                   ("DEN", "RAK"), ("DEN", "KUL"), ("DEN", "SGN"), ("DEN", "PEK"), ("DEN", "HND"), ("DEN", "DXB"), ("DEN", "IST"), ("DEN", "SYD")]INTERNATIONAL_AIRPORT_CODES_DFW = [("DFW", "YUL"), ("DFW", "YYZ"), ("DFW", "YVR"), ("DFW", "MBJ"), ("DFW", "CUN"), ("DFW", "SJU"), ("DFW", "LIS"), ("DFW", "MAD"), ("DFW", "CDG"),                                   ("DFW", "LHR"), ("DFW", "DUB"), ("DFW", "FCO"), ("DFW", "AMS"), ("DFW", "TXL"), ("DFW", "CPH"), ("DFW", "EZE"), ("DFW", "GIG"), ("DFW", "CPT"),                                   ("DFW", "RAK"), ("DFW", "KUL"), ("DFW", "SGN"), ("DFW", "PEK"), ("DFW", "HND"), ("DFW", "DXB"), ("DFW", "IST"), ("DFW", "SYD")]INTERNATIONAL_AIRPORT_CODES_ORD = [("ORD", "YUL"), ("ORD", "YYZ"), ("ORD", "YVR"), ("ORD", "MBJ"), ("ORD", "CUN"), ("ORD", "SJU"), ("ORD", "LIS"), ("ORD", "MAD"), ("ORD", "CDG"),                                   ("ORD", "LHR"), ("ORD", "DUB"), ("ORD", "FCO"), ("ORD", "AMS"), ("ORD", "TXL"), ("ORD", "CPH"), ("ORD", "EZE"), ("ORD", "GIG"), ("ORD", "CPT"),                                   ("ORD", "RAK"), ("ORD", "KUL"), ("ORD", "SGN"), ("ORD", "PEK"), ("ORD", "HND"), ("ORD", "DXB"), ("ORD", "IST"), ("ORD", "SYD")]INTERNATIONAL_AIRPORT_CODES_ATL = [("ATL", "YUL"), ("ATL", "YYZ"), ("ATL", "YVR"), ("ATL", "MBJ"), ("ATL", "CUN"), ("ATL", "SJU"), ("ATL", "LIS"), ("ATL", "MAD"), ("ATL", "CDG"),                                   ("ATL", "LHR"), ("ATL", "DUB"), ("ATL", "FCO"), ("ATL", "AMS"), ("ATL", "TXL"), ("ATL", "CPH"), ("ATL", "EZE"), ("ATL", "GIG"), ("ATL", "CPT"),                                   ("ATL", "RAK"), ("ATL", "KUL"), ("ATL", "SGN"), ("ATL", "PEK"), ("ATL", "HND"), ("ATL", "DXB"), ("ATL", "IST"), ("ATL", "SYD")]INTERNATIONAL_AIRPORT_CODES_MIA = [("MIA", "YUL"), ("MIA", "YYZ"), ("MIA", "YVR"), ("MIA", "MBJ"), ("MIA", "CUN"), ("MIA", "SJU"), ("MIA", "LIS"), ("MIA", "MAD"), ("MIA", "CDG"),                                   ("MIA", "LHR"), ("MIA", "DUB"), ("MIA", "FCO"), ("MIA", "AMS"), ("MIA", "TXL"), ("MIA", "CPH"), ("MIA", "EZE"), ("MIA", "GIG"), ("MIA", "CPT"),                                   ("MIA", "RAK"), ("MIA", "KUL"), ("MIA", "SGN"), ("MIA", "PEK"), ("MIA", "HND"), ("MIA", "DXB"), ("MIA", "IST"), ("MIA", "SYD")]INTERNATIONAL_AIRPORT_CODES_IAD = [("IAD", "YUL"), ("IAD", "YYZ"), ("IAD", "YVR"), ("IAD", "MBJ"), ("IAD", "CUN"), ("IAD", "SJU"), ("IAD", "LIS"), ("IAD", "MAD"), ("IAD", "CDG"),                                   ("IAD", "LHR"), ("IAD", "DUB"), ("IAD", "FCO"), ("IAD", "AMS"), ("IAD", "TXL"), ("IAD", "CPH"), ("IAD", "EZE"), ("IAD", "GIG"), ("IAD", "CPT"),                                   ("IAD", "RAK"), ("IAD", "KUL"), ("IAD", "SGN"), ("IAD", "PEK"), ("IAD", "HND"), ("IAD", "DXB"), ("IAD", "IST"), ("IAD", "SYD")]INTERNATIONAL_AIRPORT_CODES_JFK = [("JFK", "YUL"), ("JFK", "YYZ"), ("JFK", "YVR"), ("JFK", "MBJ"), ("JFK", "CUN"), ("JFK", "SJU"), ("JFK", "LIS"), ("JFK", "MAD"), ("JFK", "CDG"),                                   ("JFK", "LHR"), ("JFK", "DUB"), ("JFK", "FCO"), ("JFK", "AMS"), ("JFK", "TXL"), ("JFK", "CPH"), ("JFK", "EZE"), ("JFK", "GIG"), ("JFK", "CPT"),                                   ("JFK", "RAK"), ("JFK", "KUL"), ("JFK", "SGN"), ("JFK", "PEK"), ("JFK", "HND"), ("JFK", "DXB"), ("JFK", "IST"), ("JFK", "SYD")]INTERNATIONAL_AIRPORT_CODES_BOS = [("BOS", "YUL"), ("BOS", "YYZ"), ("BOS", "YVR"), ("BOS", "MBJ"), ("BOS", "CUN"), ("BOS", "SJU"), ("BOS", "LIS"), ("BOS", "MAD"), ("BOS", "CDG"),                                   ("BOS", "LHR"), ("BOS", "DUB"), ("BOS", "FCO"), ("BOS", "AMS"), ("BOS", "TXL"), ("BOS", "CPH"), ("BOS", "EZE"), ("BOS", "GIG"), ("BOS", "CPT"),                                   ("BOS", "RAK"), ("BOS", "KUL"), ("BOS", "SGN"), ("BOS", "PEK"), ("BOS", "HND"), ("BOS", "DXB"), ("BOS", "IST"), ("BOS", "SYD")]INTERNATIONAL_AIRPORT_CODES_LAS = [("LAS", "YUL"), ("LAS", "YYZ"), ("LAS", "YVR"), ("LAS", "MBJ"), ("LAS", "CUN"), ("LAS", "SJU"), ("LAS", "LIS"), ("LAS", "MAD"), ("LAS", "CDG"),                                   ("LAS", "LHR"), ("LAS", "DUB"), ("LAS", "FCO"), ("LAS", "AMS"), ("LAS", "TXL"), ("LAS", "CPH"), ("LAS", "EZE"), ("LAS", "GIG"), ("LAS", "CPT"),                                   ("LAS", "RAK"), ("LAS", "KUL"), ("LAS", "SGN"), ("LAS", "PEK"), ("LAS", "HND"), ("LAS", "DXB"), ("LAS", "IST"), ("LAS", "SYD")]"""Select statements to locate flights with dirty data:SELECT * FROM  FLIGHTS where outbound_city_origin is NOT inbound_city_final_destination;SELECT * FROM  FLIGHTS where inbound_city_origin is NOT outbound_city_final_destination;"""def get_price(first_origin, destination):    flight_request = {        "request": {            "passengers": {                "kind": "qpxexpress#passengerCounts",                "adultCount": 1,            },            "slice": [                {                    "kind": "qpxexpress#sliceInput",                    "origin": first_origin,                    "destination":  destination,                    "date": "2015-09-02",                    "maxStops": 1,                    "maxPrice": 3000                },                {                    "kind": "qpxexpress#sliceInput",                    "origin": destination,                    "destination": first_origin,                    "date": "2015-09-16",                    "maxStops": 1,                    "maxPrice": 3000                }            ],            "refundable": "false",            "solutions": 1        }    }    jsonreq = json.dumps(flight_request, encoding='utf-8', indent=1)    try:        req = urllib2.Request(API_URL, jsonreq, {'Content-Type': 'application/json'})        flight = urllib2.urlopen(req)        response = flight.read()        flight.close()        parsed_json = json.loads(response)        printer = pprint.PrettyPrinter()        printer.pprint(parsed_json)        response = parsed_json        if len(response['trips']['tripOption'][0]['slice'][0]['segment']) == 1:            outbound_city_final_destination = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['destination']            outbound_destination_city_airport = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['destination']            inbound_city_final_destination = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['destination']            inbound_destination_city_airport = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['destination']            outbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['arrivalTime'])            inbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['arrivalTime'])        else:            outbound_city_final_destination = response['trips']['tripOption'][0]['slice'][0]['segment'][1]['leg'][0]['destination']            inbound_city_final_destination = response['trips']['tripOption'][0]['slice'][1]['segment'][1]['leg'][0]['destination']            outbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][0]['segment'][1]['leg'][0]['arrivalTime'])            inbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][1]['segment'][1]['leg'][0]['arrivalTime'])        outbound_city_origin = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['origin']        outbound_city_airport = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['origin']        outbound_airline_code = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['flight']['carrier']        outbound_flight_number = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['flight']['number']        outbound_datetime_departure = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['departureTime'])        inbound_city_origin = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['origin']        inbound_city_airport = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['origin']        inbound_airline_code = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['flight']['carrier']        inbound_flight_number = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['flight']['number']        inbound_datetime_departure = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['departureTime'])        base_fare = response['trips']['tripOption'][0]['pricing'][0]['saleFareTotal']        base_fare = base_fare[3:]        base_fare = float(base_fare)        base_fare = int(base_fare)        taxes = response['trips']['tripOption'][0]['pricing'][0]['saleTaxTotal']        taxes = taxes[3:]        taxes = float(taxes)        taxes = int(taxes)        total_fare = response['trips']['tripOption'][0]['pricing'][0]['saleTotal']        total_fare = total_fare[3:]        total_fare = float(total_fare)        total_fare = int(total_fare)        outbound_datetime_departure = str(outbound_datetime_departure)        outbound_datetime_arrival = str(outbound_datetime_arrival)        inbound_datetime_departure = str(inbound_datetime_departure)        inbound_datetime_arrival = str(inbound_datetime_arrival)        outbound_datetime_departure = outbound_datetime_departure[0:16]        outbound_datetime_arrival = outbound_datetime_arrival[0:16]        inbound_datetime_departure = inbound_datetime_departure[0:16]        inbound_datetime_arrival = inbound_datetime_arrival[0:16]        outbound_airline_name = airlines[outbound_airline_code]        inbound_airline_name = airlines[inbound_airline_code]        outbound_city_origin = cities[outbound_city_origin]        inbound_city_origin = cities[inbound_city_origin]        outbound_city_final_destination = cities[outbound_city_final_destination]        inbound_city_final_destination = cities[inbound_city_final_destination]        outbound_city_airport = airports[outbound_city_airport]        inbound_city_airport = airports[inbound_city_airport]        flight = Flight(outbound_city_origin=outbound_city_origin, outbound_city_final_destination=outbound_city_final_destination, outbound_airline_code=outbound_airline_code, outbound_airline_name=outbound_airline_name, outbound_flight_number=outbound_flight_number, outbound_datetime_departure=outbound_datetime_departure, outbound_datetime_arrival=outbound_datetime_arrival, inbound_city_origin=inbound_city_origin, inbound_city_final_destination=inbound_city_final_destination, inbound_airline_code=inbound_airline_code, inbound_airline_name=inbound_airline_name, inbound_flight_number=inbound_flight_number, inbound_datetime_departure=inbound_datetime_departure, inbound_datetime_arrival=inbound_datetime_arrival, outbound_city_airport=outbound_city_airport, inbound_city_airport=inbound_city_airport, base_fare=base_fare, taxes=taxes, total_fare=total_fare)        db.session.add(flight)        db.session.commit()    except urllib2.HTTPError as e:        print "There was an urllib2.HTTPError...API RATE LIMIT REACHED !!!!!!!!!!"        return flightif __name__ == "__main__":    connect_to_db(app)    for city in INTERNATIONAL_AIRPORT_CODES_DEN:        get_price(city[0], city[1])
import urllib2import sysimport jsonimport pprintimport dateutil.parserfrom model import connect_to_db, db, Flight, Userfrom server import appfrom key import google_flights_api_key_1, google_flights_api_key_2, google_flights_api_key_3, google_flights_api_key_4, google_flights_api_key_5, google_flights_api_key_6api_url_one = google_flights_api_key_5api_url_two = google_flights_api_key_6USA_AIRPORT_CODES = ["SFO", "LAX", "PHX", "SEA", "DEN", "DFW", "IAH", "ORD",                     "ATL", "MIA", "IAD", "PHL", "JFK", "BOS", "CLT", "LAS", "HNL", "OGG"]CANADIAN_AIRPORT_CODES = ["YUL", "YYZ", "YVR"]MEXICO_CARIBBEAN_AIRPORT_CODES = ["NAS", "MBJ", "BGI", "POS", "SJU", "GCM", "MEX", "CUN"]LATIN_AMERICAN_AIRPORT_CODES = ["SJO", "PTY", "CTG", "BOG", "UIO", "LIM", "EZE", "GIG", "CCS", "GRU"]EUROPEAN_AIRPORT_CODES = ["LIS", "MAD", "CDG", "LHR", "DUB", "FCO", "ZRH", "GVA", "MXP",                          "AMS", "TXL", "BRU", "FRA", "ATH", "BUD", "WAW", "DME", "ARN", "CPH"]AFRICAN_AIRPORT_CODES = ["CAI", "TUN", "RAK", "CMN", "DKR", "LOS", "JNB", "CPT", "DAR", "NBO"]ASIAN_AIRPORT_CODES = ["BOM", "DEL", "CGK", "SIN", "KUL", "HKT", "BKK", "PEK", "HND", "HKG",                       "PVG", "ICN", "SGN", "MNL"]MIDDLE_EASTERN_AIRPORT_CODES = ["RUH", "DXB", "IST", "TLV"]OCEANIAN_AIRPORT_CODES = ["SYD", "MEL", "AKL", "PPT", "POM"]CITY_COMBOS_1 = []# CITY_COMBOS_2 =[("LAX","IAD"), ("LAX","PHL"), ("LAX","JFK"), ("LAX","BOS"), ("LAX","CLT"), ("LAX","LAS")]"""("SFO","LAX"), ("SFO","PHX"), ("SFO","SEA"), ("SFO","DEN"), ("SFO","DFW"), ("SFO","IAH"),                 ("SFO","ORD"), ("SFO","ATL"), ("SFO","MIA"), ("SFO","PHL"), ("SFO","JFK"), ("SFO","BOS"), ("SFO","CLT"), ("SFO","LAS")                ("LAX","SFO"), ("LAX","PHX"), ("LAX","SEA"), ("LAX","DEN"), ("LAX","DFW"), ("LAX","IAH"),                 ("LAX","ORD"), ("LAX","ATL"), ("LAX","MIA"),  THESE CITIES FROM CITY_COMBOS_1 HAVE ALREADY BEEN SEEDED TO THE DB!"""""" ("SFO","IAD")--THIS BROKE B/C IT HAS 2 LEGS ON THE OUTBOUND TRIP"""def get_price_traveler_one(first_origin="SFO", destination="STL", departure_date="2015-09-02", return_date="2015-09-16", first_max_price=3000):    flight_request = {        "request": {            "passengers": {                "kind": "qpxexpress#passengerCounts",                "adultCount": 1,            },            "slice": [                {                    "kind": "qpxexpress#sliceInput",                    "origin": first_origin,                    "destination":  destination,                    "date": departure_date,                    "maxStops": 1,                    "maxPrice": first_max_price                },                {                    "kind": "qpxexpress#sliceInput",                    "origin": destination,                    "destination": first_origin,                    "date": return_date,                    "maxStops": 1,                    "maxPrice": first_max_price                }            ],            "refundable": "false",            "solutions": 1        }    }        jsonreq = json.dumps(flight_request, encoding='utf-8', indent=1)    try:        req = urllib2.Request(api_url_one, jsonreq, {'Content-Type': 'application/json'})        flight = urllib2.urlopen(req)        response = flight.read()        flight.close()        parsed_json = json.loads(response)        printer = pprint.PrettyPrinter()        printer.pprint(parsed_json)        response = parsed_json            if len(response['trips']['tripOption'][0]['slice'][0]['segment']) == 1:            outbound_flight_destination = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['destination']            inbound_flight_destination = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['destination']            outbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['arrivalTime'])            inbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['arrivalTime'])        else:            outbound_flight_destination = response['trips']['tripOption'][0]['slice'][0]['segment'][1]['leg'][0]['destination']            inbound_flight_destination = response['trips']['tripOption'][0]['slice'][1]['segment'][1]['leg'][0]['destination']            outbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][0]['segment'][1]['leg'][0]['arrivalTime'])            inbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][1]['segment'][1]['leg'][0]['arrivalTime'])        outbound_flight_origin = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['origin']        outbound_airline = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['flight']['carrier']        outbound_flight_number = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['flight']['number']        outbound_datetime_departure = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['departureTime'])        inbound_flight_origin = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['origin']        inbound_airline = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['flight']['carrier']        inbound_flight_number = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['flight']['number']        inbound_datetime_departure = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['departureTime'])        base_fare = response['trips']['tripOption'][0]['pricing'][0]['saleFareTotal']        taxes = response['trips']['tripOption'][0]['pricing'][0]['saleTaxTotal']        total_fare = response['trips']['tripOption'][0]['pricing'][0]['saleTotal']        flight = Flight(outbound_city_origin=outbound_flight_origin, outbound_city_final_destination=outbound_flight_destination, outbound_airline=outbound_airline,                        outbound_flight_number=outbound_flight_number, outbound_datetime_departure=outbound_datetime_departure, outbound_datetime_arrival=outbound_datetime_arrival,                        inbound_city_origin=inbound_flight_origin, inbound_city_final_destination=inbound_flight_destination, inbound_airline=inbound_airline,                        inbound_flight_number=inbound_flight_number, inbound_datetime_departure=inbound_datetime_departure, inbound_datetime_arrival=inbound_datetime_arrival,                        base_fare=base_fare, taxes=taxes, total_fare=total_fare)        db.session.add(flight)        db.session.commit()             except urllib2.HTTPError as e:         print "There was an urllib2.HTTPError...API RATE LIMIT REACHED for 1st search!"                return flight def get_price_traveler_two(second_origin="JFK", destination="STL", departure_date="2015-09-02", return_date="2015-09-16", second_max_price=3000):    flight_request = {        "request": {            "passengers": {                "kind": "qpxexpress#passengerCounts",                "adultCount": 1,            },            "slice": [                {                    "kind": "qpxexpress#sliceInput",                    "origin": second_origin,                    "destination":  destination,                    "date": departure_date,                    "maxStops": 1,                    "maxPrice": second_max_price                },                {                    "kind": "qpxexpress#sliceInput",                    "origin": destination,                    "destination": second_origin,                    "date": return_date,                    "maxStops": 1,                    "maxPrice": second_max_price                }            ],            "refundable": "false",            "solutions": 1        }    }        jsonreq = json.dumps(flight_request, encoding='utf-8', indent=1)    try:        req = urllib2.Request(api_url_two, jsonreq, {'Content-Type': 'application/json'})        flight = urllib2.urlopen(req)        response = flight.read()        flight.close()        parsed_json = json.loads(response)        printer = pprint.PrettyPrinter()        printer.pprint(parsed_json)        response = parsed_json            if len(response['trips']['tripOption'][0]['slice'][0]['segment']) == 1:            outbound_flight_destination = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['destination']            inbound_flight_destination = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['destination']            outbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['arrivalTime'])            inbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['arrivalTime'])        else:            outbound_flight_destination = response['trips']['tripOption'][0]['slice'][0]['segment'][1]['leg'][0]['destination']            inbound_flight_destination = response['trips']['tripOption'][0]['slice'][1]['segment'][1]['leg'][0]['destination']            outbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][0]['segment'][1]['leg'][0]['arrivalTime'])            inbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][1]['segment'][1]['leg'][0]['arrivalTime'])        outbound_flight_origin = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['origin']        outbound_airline = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['flight']['carrier']        outbound_flight_number = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['flight']['number']        outbound_datetime_departure = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['departureTime'])        inbound_flight_origin = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['origin']        inbound_airline = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['flight']['carrier']        inbound_flight_number = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['flight']['number']        inbound_datetime_departure = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['departureTime'])        base_fare = response['trips']['tripOption'][0]['pricing'][0]['saleFareTotal']        taxes = response['trips']['tripOption'][0]['pricing'][0]['saleTaxTotal']        total_fare = response['trips']['tripOption'][0]['pricing'][0]['saleTotal']        flight = Flight(outbound_city_origin=outbound_flight_origin, outbound_city_final_destination=outbound_flight_destination, outbound_airline=outbound_airline,                        outbound_flight_number=outbound_flight_number, outbound_datetime_departure=outbound_datetime_departure, outbound_datetime_arrival=outbound_datetime_arrival,                        inbound_city_origin=inbound_flight_origin, inbound_city_final_destination=inbound_flight_destination, inbound_airline=inbound_airline,                        inbound_flight_number=inbound_flight_number, inbound_datetime_departure=inbound_datetime_departure, inbound_datetime_arrival=inbound_datetime_arrival,                        base_fare=base_fare, taxes=taxes, total_fare=total_fare)        db.session.add(flight)        db.session.commit()             except urllib2.HTTPError as e:         print "There was an urllib2.HTTPError...API RATE LIMIT REACHED for 2nd search!"                return flightif __name__ == "__main__":    connect_to_db(app)    db.create_all()    # for city in CITY_COMBOS_1:    #     get_price_traveler_one(city[0], city[1])    # for city in CITY_COMBOS_2:    #     get_price_traveler_two(city[0], city[1])            
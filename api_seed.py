import urllib2import sysimport jsonimport pprintimport dateutil.parserfrom model import connect_to_db, db, Flight, User, SavedSearchfrom server import app# from key import google_flights_api_key_1, google_flights_api_key_2, google_flights_api_key_3, google_flights_api_key_4, google_flights_api_key_5, google_flights_api_key_6API_URL = "https://www.googleapis.com/qpxExpress/v1/trips/search?key=AIzaSyCCAL7u_3hy7OTFiMcPXydkfwFR_WwTZN0"USA_AIRPORT_CODES = ["SFO", "LAX", "PHX", "SEA", "DEN", "DFW", "ORD", "ATL", "MIA", "IAD", "JFK", "BOS", "LAS", "OGG"]CANADIAN_AIRPORT_CODES = ["YUL", "YYZ", "YVR"]MEXICO_CARIBBEAN_AIRPORT_CODES = ["NAS", "MBJ", "BGI", "POS", "SJU", "GCM", "MEX", "CUN"]LATIN_AMERICAN_AIRPORT_CODES = ["SJO", "PTY", "CTG", "BOG", "UIO", "LIM", "EZE", "GIG", "CCS", "GRU"]EUROPEAN_AIRPORT_CODES = ["LIS", "MAD", "CDG", "LHR", "DUB", "FCO", "ZRH", "GVA", "MXP",                          "AMS", "TXL", "BRU", "FRA", "ATH", "BUD", "WAW", "DME", "ARN", "CPH"]AFRICAN_AIRPORT_CODES = ["CAI", "TUN", "RAK", "CMN", "DKR", "LOS", "JNB", "CPT", "DAR", "NBO"]ASIAN_AIRPORT_CODES = ["BOM", "DEL", "CGK", "SIN", "KUL", "HKT", "BKK", "PEK", "HND", "HKG", "PVG", "ICN", "SGN", "MNL"]MIDDLE_EASTERN_AIRPORT_CODES = ["RUH", "DXB", "IST", "TLV"]OCEANIAN_AIRPORT_CODES = ["SYD", "MEL", "AKL", "PPT", "POM"]CITY_COMBOS_1 = [("BOS", "OGG"), ("SFO", "CUN"), ("SFO", "EZE"), ("SFO", "IAD"), ("LAX", "CLT"), ("SFO", "LHR"), ("SFO", "AMS"), ("IAD", "SFO"), ("IAD", "SEA"), ("ATL", "JFK"), ("SFO", "CDG")]CITY_COMBOS_2 = [("ATL", "YUL"), ("ATL", "YYZ"), ("ATL", "YVR"), ("ATL", "MBJ"), ("ATL", "CUN"), ("ATL", "SJU"), ("ATL", "LIS"), ("ATL", "MAD"), ("ATL", "CDG"),                 ("ATL", "LHR"), ("ATL", "DUB"), ("ATL", "FCO"), ("ATL", "AMS"), ("ATL", "TXL"), ("ATL", "CPH"), ("ATL", "EZE"), ("ATL", "GIG"), ("ATL", "CPT"),                 ("ATL", "RAK"), ("ATL", "KUL"), ("ATL", "SGN"), ("ATL", "PEK"), ("ATL", "HND"), ("ATL", "DXB"), ("ATL", "IST"), ("ATL", "SYD")]INTERNATIONAL_AIRPORT_CODES_SF0 = [("SFO", "YUL"), ("SFO", "YYZ"), ("SFO", "YVR"), ("SFO", "MBJ"), ("SFO", "CUN"), ("SFO", "SJU"), ("SFO", "LIS"), ("SFO", "MAD"), ("SFO", "CDG"),                                   ("SFO", "LHR"), ("SFO", "DUB"), ("SFO", "FCO"), ("SFO", "AMS"), ("SFO", "TXL"), ("SFO", "CPH"), ("SFO", "EZE"), ("SFO", "GIG"), ("SFO", "CPT"),                                   ("SFO", "RAK"), ("SFO", "KUL"), ("SFO", "SGN"), ("SFO", "PEK"), ("SFO", "HND"), ("SFO", "DXB"), ("SFO", "IST"), ("SFO", "SYD")]INTERNATIONAL_AIRPORT_CODES_ORD = [("ORD", "CDG"),("ORD", "LHR"), ("ORD", "DUB"), ("ORD", "FCO"), ("ORD", "AMS"), ("ORD", "TXL"), ("ORD", "CPH"), ("ORD", "EZE"), ("ORD", "GIG"), ("ORD", "CPT"),                                   ("ORD", "RAK"), ("ORD", "KUL"), ("ORD", "SGN"), ("ORD", "PEK"), ("ORD", "HND"), ("ORD", "DXB"), ("ORD", "IST"), ("ORD", "SYD")]"""("PHX", "LHR"), ("ORD", "YVR"),("ORD", "MAD"), ("DFW", "CDG"), ("DFW", "LHR"), ("DFW", "MAD"), ("SEA", "LHR") ("SEA", "YYZ") ("ATL", "LHR"), ("ATL", "DUB"), ("ATL", "FCO"), ("ATL", "AMS"), ("ATL", "TXL"), ("ATL", "CPH"), ("ATL", "EZE"), ("ATL", "GIG"), ("ATL", "CPT"),                               ("BOS","OGG"), ("SFO", "CUN"), ("SFO", "EZE"), ("SFO","IAD"), ("LAX","CLT"), ("SFO", "LHR"), ("SFO", "AMS"), ("IAD","SFO"), ("IAD","SEA"), ("ATL","JFK"), ("SFO", "CDG")--THIS BROKE B/C IT HAS 2 LEGS ON THE OUTBOUND TRIP""""""Select statements to locate flights with dirty data:SELECT * FROM  FLIGHTS where outbound_city_origin is NOT inbound_city_final_destination;SELECT * FROM  FLIGHTS where inbound_city_origin is NOT outbound_city_final_destination;"""def get_price(first_origin, destination):    flight_request = {        "request": {            "passengers": {                "kind": "qpxexpress#passengerCounts",                "adultCount": 1,            },            "slice": [                {                    "kind": "qpxexpress#sliceInput",                    "origin": first_origin,                    "destination":  destination,                    "date": "2015-09-02",                    "maxStops": 1,                    "maxPrice": 3000                },                {                    "kind": "qpxexpress#sliceInput",                    "origin": destination,                    "destination": first_origin,                    "date": "2015-09-16",                    "maxStops": 1,                    "maxPrice": 3000                }            ],            "refundable": "false",            "solutions": 1        }    }    jsonreq = json.dumps(flight_request, encoding='utf-8', indent=1)    try:        req = urllib2.Request(API_URL, jsonreq, {'Content-Type': 'application/json'})        flight = urllib2.urlopen(req)        response = flight.read()        flight.close()        parsed_json = json.loads(response)        printer = pprint.PrettyPrinter()        printer.pprint(parsed_json)        response = parsed_json        if len(response['trips']['tripOption'][0]['slice'][0]['segment']) == 1:            outbound_flight_destination = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['destination']            inbound_flight_destination = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['destination']            outbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['arrivalTime'])            inbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['arrivalTime'])        else:            outbound_flight_destination = response['trips']['tripOption'][0]['slice'][0]['segment'][1]['leg'][0]['destination']            inbound_flight_destination = response['trips']['tripOption'][0]['slice'][1]['segment'][1]['leg'][0]['destination']            outbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][0]['segment'][1]['leg'][0]['arrivalTime'])            inbound_datetime_arrival = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][1]['segment'][1]['leg'][0]['arrivalTime'])        outbound_flight_origin = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['origin']        outbound_airline = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['flight']['carrier']        outbound_flight_number = response['trips']['tripOption'][0]['slice'][0]['segment'][0]['flight']['number']        outbound_datetime_departure = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][0]['segment'][0]['leg'][0]['departureTime'])        inbound_flight_origin = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['origin']        inbound_airline = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['flight']['carrier']        inbound_flight_number = response['trips']['tripOption'][0]['slice'][1]['segment'][0]['flight']['number']        inbound_datetime_departure = dateutil.parser.parse(response['trips']['tripOption'][0]['slice'][1]['segment'][0]['leg'][0]['departureTime'])        base_fare = response['trips']['tripOption'][0]['pricing'][0]['saleFareTotal']        base_fare = base_fare[3:]        base_fare = float(base_fare)        base_fare = int(base_fare)        taxes = response['trips']['tripOption'][0]['pricing'][0]['saleTaxTotal']        taxes = taxes[3:]        taxes = float(taxes)        taxes = int(taxes)        total_fare = response['trips']['tripOption'][0]['pricing'][0]['saleTotal']        total_fare = total_fare[3:]        total_fare = float(total_fare)        total_fare = int(total_fare)        outbound_datetime_departure = str(outbound_datetime_departure)        outbound_datetime_arrival = str(outbound_datetime_arrival)        inbound_datetime_departure = str(inbound_datetime_departure)        inbound_datetime_arrival = str(inbound_datetime_arrival)        outbound_datetime_departure = outbound_datetime_departure[0:16]        outbound_datetime_arrival = outbound_datetime_arrival[0:16]        inbound_datetime_departure = inbound_datetime_departure[0:16]        inbound_datetime_arrival = inbound_datetime_arrival[0:16]        flight = Flight(outbound_city_origin=outbound_flight_origin, outbound_city_final_destination=outbound_flight_destination, outbound_airline=outbound_airline,                        outbound_flight_number=outbound_flight_number, outbound_datetime_departure=outbound_datetime_departure, outbound_datetime_arrival=outbound_datetime_arrival,                        inbound_city_origin=inbound_flight_origin, inbound_city_final_destination=inbound_flight_destination, inbound_airline=inbound_airline,                        inbound_flight_number=inbound_flight_number, inbound_datetime_departure=inbound_datetime_departure, inbound_datetime_arrival=inbound_datetime_arrival,                        base_fare=base_fare, taxes=taxes, total_fare=total_fare)        db.session.add(flight)        db.session.commit()    except urllib2.HTTPError as e:        print "There was an urllib2.HTTPError...API RATE LIMIT REACHED for 1st API KEY!"        return flightif __name__ == "__main__":    connect_to_db(app)    for city in INTERNATIONAL_AIRPORT_CODES_ORD:        get_price(city[0], city[1])